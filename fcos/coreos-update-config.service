[Unit]
Description=Update Coreos Configuration by applying (transpiled butane) saltstack config
Wants=containers-build@saltstack.service boot-complete.target
After=containers-build@saltstack.service boot-complete.target
ConditionPathExists=/run/user/1000/coreos-update-config/sls/main.sls

# Run saltstack by executing salt-call in an alpine container,
# mounting /etc, /var, /run from host into container
# XXX only /etc, /var, /run are available for changes

[Service]
Type=oneshot

# roughly equal to tools.py:salt_config
Environment=resource_name="%n"
Environment=base_dir=/run/user/1000
Environment=root_dir=/run/user/1000/coreos-update-config
Environment=tmp_dir=/run/user/1000/coreos-update-config/tmp
Environment=sls_dir=/run/user/1000/coreos-update-config/sls
Environment=pillar_dir=/run/user/1000/coreos-update-config/pillar

# create a minion config
ExecStart=/usr/bin/bash -c \
'printf "id: ${resource_name}\
\nlocal: True\
\nlog_level_logfile: info\
\nfile_client: local\
\nfileserver_backend:\
\n- roots\
\nfile_roots:\
\n  base:\
\n  - ${sls_dir}\
\npillar_roots:\
\n  base:\
\n  - ${pillar_dir}\
\ngrains:\
\n  resource_name: ${resource_name}\
\n  base_dir: ${base_dir}\
\n  root_dir: ${root_dir}\
\n  tmp_dir: ${tmp_dir}\
\n  sls_dir: ${sls_dir}\
\n  pillar_dir: ${pillar_dir}\
\nroot_dir: ${root_dir}\
\nconf_file: ${root_dir}/minion\
\npki_dir: ${root_dir}/etc/salt/pki/minion\
\npidfile: ${root_dir}/var/run/salt-minion.pid\
\nsock_dir: ${root_dir}/var/run/salt/minion\
\ncachedir: ${root_dir}/var/cache/salt/minion\
\nextension_modules: ${root_dir}/var/cache/salt/minion/extmods\
\nlog_file: ${root_dir}/var/log/salt/minion\
\n" > ${root_dir}/minion'

# create sls/top.sls, pillar/top.sls, pillar/main.sls
ExecStart=/usr/bin/bash -c \
    'mkdir -p "${sls_dir}" "${pillar_dir}"; \
    printf "base:\n  \'*\':\n    - main\n" > "${sls_dir}/top.sls"; \
    printf "base:\n  \'*\':\n    - main\n" > "${pillar_dir}/top.sls" \
    printf "\n" > "${pillar_dir}/main.sls"'

# make a salt-call test/mock run, to see if update would abort midways
ExecStart=/usr/bin/podman run --privileged \
    -v /etc:/etc -v /var:/var -v /run:/run -v /var/home:/home -v /var/roothome:/root \
    localhost/saltstack:latest \
    /usr/local/bin/salt-call -c ${root_dir} state.highstate mock=true > /dev/null

# do the actual update work
ExecStart=/usr/bin/podman run --privileged \
    -v /etc:/etc -v /var:/var -v /run:/run -v /var/home:/home -v /var/roothome:/root \
    localhost/saltstack:latest \
    /usr/local/bin/salt-call -c ${root_dir} state.highstate

# reload systemd daemon to resync with state from disk
ExecStart=/usr/bin/systemctl daemon-reload

# enable each service that should be enabled, by list created from butane2salt.jinja
ExecStart=/usr/bin/bash -c '\
    if test -e ${root_dir}/service_enabled.txt; then \
        toenable=$(cat ${root_dir}/service_enabled.txt | \
            grep -v "^#" | grep -v "^[[:space:]]*$" | sort | uniq); \
        if test "$toenable" != ""; then \
            echo "Enabling: $toenable"; \
            systemctl enable $toenable; \
        fi; \
    fi'

# reset failed units and restart each service that got changed, by list created from butane2salt.jinja
# dont act on template services, dont act on services without [Install] sections
ExecStart=/usr/bin/bash -c '\
    systemctl reset-failed; \
    if test -e ${root_dir}/service_changed.txt; then \
        changed=$(cat ${root_dir}/service_changed.txt | \
            grep -v "^#" | grep -v "^[[:space:]]*$" | sort | uniq); \
        if test "$changed" != ""; then \
            torestart=""; \
            templates=""; \
            for i in $changed; do \
                if test "${i%@" != "${i}"; then \
                    templates="$templates $i"; \
                else \
                    wantedby=$(systemctl show "${i}.service" --property=WantedBy --value); \
                    if test "$wantedby" != ""; then \
                        torestart="$torestart $i"; \
                    fi; \
                fi; \
            done; \
            if test "$torestart" != ""; then \
                echo "Restarting: $torestart"; \
                systemctl restart $torestart; \
            fi; \
        fi; \
    fi'

# delete main.sls because its containing secrets and as flag that update is done
# clean other runtime files too, because they also may leak secrets

# ExecStart=rm ${sls_dir}/main.sls


# XXX have no [Install] section, because this service is only called from external
