{# translates and inlines a subset of butane spec into a one file saltstack salt spec

to be used from the systemd service "coreos-update-config.service"
in a saltstack salt-call command, which updates the config to the desired state
keeps changes minimal, smart restarts of direct or indirectly changed services

#### additional outputs
- {update_dir}/service_changed.txt
    - with a commented, non uniqe, not sorted list of service names with changed configuration
    - usage: cat ${update_dir}/service_changed.txt | grep -v "^#" | grep -v "^[[:space:]]*$" | sort | uniq
- {update_dir}/service_enabled.txt
- {update_dir}/service_disabled.txt

#### translation scope, filter and import functions
- only the currently used subset in *.bu files of the butane spec is supported
  - only storage:directories/links/files/trees and systemd:units[:dropins] are translated
- Look at tools.jinja_run for custom filter like traverse files or regex_replace
- use 'import "subdir/filename" as contents' to import from basedir/subdir/filename

#}
{% set update_dir= "/run/user/1000/coreos-update-config" %}
{#

write out user,group,mode if present

#}
{%- macro user_group_mode(o) -%}
{%- if o.user is defined -%}
{%- if o.user.id is defined   %}    - user: {{ o.user.id }}{% endif %}
{%- if o.user.name is defined %}    - user: {{ o.user.name }}{% endif %}
{%- endif -%}
{%- if o.group is defined -%}
{%- if o.group.id is defined   %}    - group: {{ o.group.id }}{% endif %}
{%- if o.group.name is defined %}    - group: {{ o.group.name }}{% endif %}
{%- endif -%}
{%- if o.mode is defined %}    - mode: {{ "%#o"|format(o.mode) }}{% endif %}
{%- endmacro -%}
{#

write service to service_enabled.txt

#}
{%- macro service_enabled(service_path, service_name) -%}

service_enabled_{{ service_path }}:
  file.accumulated:
    - filename: {{ update_dir }}/service_enabled.txt
    - text: {{ service_name }}
    - onchanges:
      - file: {{ service_path }}
    - require_in:
      - file: service_enabled

{%- endmacro -%}
{#

write service to service_changed.txt, if target matches regex_list
  - any unit in systemd/system/*.*
  - any dropin in systemd/system/*.d/*.conf
  - any env in [local,containers,compose]/*.env
  - any file in [containers,compose]/build/*/*
#}
{%- macro target_changed(target) -%}
  {%- set service_regex_list = [
    "/etc/systemd/system/([^/]+)\.[^\.]+",
    "/etc/systemd/system/([^/]+)\.[^\.]+\.d/.+\.conf",

    "/etc/local/environment/([^/]+)\.env",
    "/etc/containers/environment/([^/]+)\.env",
    "/etc/compose/environment/([^/]+)\.env",

    "/etc/containers/systemd/([^/.]+)\..+",

    "/etc/containers/build/([^/]+)/.+",
    "/etc/compose/build/([^/]+)/.+",
  ] -%}
  {%- set target_ns= namespace(target_name="") -%}
  {%- for service_regex in service_regex_list -%}
    {%- if target|regex_match("^" ~ service_regex~ "$") -%}
      {%- set target_ns.target_name = target|regex_replace(service_regex, '\\1') -%}
    {%- endif -%}
  {%- endfor -%}
  {%- if target_ns.target_name != "" -%}
service_changed_{{ target }}:
  file.accumulated:
    - filename: {{ update_dir }}/service_changed.txt
    - text: {{ target_ns.target_name }}
    - onchanges:
      - file: {{ target }}
    - require_in:
      - file: service_changed

  {%- endif -%}
{%- endmacro -%}
{#

Accumulator targets for service_enabled and service_changed

#}
create_service_enabled:
  file.managed:
    - name: {{ update_dir }}/service_enabled.txt
    - user: 1000
    - group: 1000

service_enabled:
  file.blockreplace:
    - name: {{ update_dir }}/service_enabled.txt
    - marker_start: "# START"
    - marker_end: "# END"
    - content: ""
    - append_if_not_found: True
    - show_changes: True
    - require:
      - file: create_service_enabled

create_service_changed:
  file.managed:
    - name: {{ update_dir }}/service_changed.txt
    - user: 1000
    - group: 1000

service_changed:
  file.blockreplace:
    - name: {{ update_dir }}/service_changed.txt
    - marker_start: "# START"
    - marker_end: "# END"
    - content: ""
    - append_if_not_found: True
    - show_changes: True
    - require:
      - file: create_service_changed
{#

Translate directories, links, files, trees, systemd units and dropins

#}
{%- if "storage" in butane and "directories" in butane.storage %}
  {%- for d in butane.storage.directories %}
{{ d.path }}:
  file.directory:
    - makedirs: true
{{ user_group_mode(d) }}
  {% endfor %}
{%- endif %}


{%- if "storage" in butane and "links" in butane.storage %}
  {%- for l in butane.storage.links %}
{{ l.path }}:
  file.symlink:
    - makedirs: True
    {%- if l.target is defined %}
    - target: {{ l.target }}
    {%- endif %}
    {%- if l.hard is defined and l.hard %}
    - hard: true
    {%- endif %}
{{ user_group_mode(l) }}
{{ target_changed(l.path) }}
  {% endfor %}
{%- endif %}


{%- if "storage" in butane and "files" in butane.storage %}
  {%- for f in butane.storage.files %}
{{ f.path }}:
  file.managed:
    - makedirs: True
{{ user_group_mode(f) }}
    {%- if f.contents is defined %}
      {%- if f.contents.source is defined %}
    - source: {{ f.contents.source }}
      {%- endif %}
      {%- if f.verification is defined %}
    - source_hash: {{ f.verification[7:] }}
      {%- endif %}
      {%- if f.contents.inline is defined %}
    - contents: |
        {{ f.contents.inline|indent(8) }}
      {%- endif %}
      {%- if f.contents.local is defined %}
        {%- import f.contents.local as contents %}
    - contents: |
        {{ contents|string()|indent(8) }}
      {%- endif %}
    {%- endif %}
{{ target_changed(f.path) }}
  {% endfor %}
{%- endif %}


{%- if "storage" in butane and "trees" in butane.storage %}
  {%- for t in butane.storage.trees %}
    {%- set path = t.path %}
    {% set list_str= t.local|list_files() %}
    {%- for f in list_str.split("\n") %}
      {%- import f as contents %}
      {%- set fp= path ~ '/'~ f.replace(t.local ~ '/', '') %}
{{ fp }}:
  file.managed:
    - makedirs: True
    - contents: |
        {{ contents|string()|indent(8) }}
{{ target_changed(fp) }}
    {% endfor %}
  {% endfor %}
{%- endif %}


{%- if "systemd" in butane and "units" in butane.systemd %}
  {%- for u in butane.systemd.units %}
    {%- set up= "/etc/systemd/system/" ~ u.name %}
    {%- if not u.mask|d(false) %}
      {%- if u.contents is defined or u.contents_local is defined %}
{{ up }}:
  file.managed:
    # XXX do not follow_symlinks, because if masked file is symlinked to /dev/null
    - follow_symlinks: False
        {%- if u.contents is defined %}
    - contents: |
        {{ u.contents|indent(8) }}
        {%- elif u.contents_local is defined %}
          {%- import u.contents_local as contents %}
    - contents: |
        {{ contents|string()|indent(8) }}
        {%- endif %}
{{ target_changed(up) }}
      {%- endif %}
    {%- else %}
{{ up }}:
  file.symlink:
    # XXX force to replace a normal file, because if real file exists beforehand
    - force: True
    - target: /dev/null
{{ target_changed(up) }}
    {%- endif %}

    {%- if u.dropins is defined %}
      {%- for d in u.dropins %}
        {%- set dp="/etc/systemd/system/" ~ u.name ~ ".d/" ~ d.name %}
{{ dp }}:
  file.managed:
    - makedirs: True
        {%- if d.contents is defined %}
    - contents: |
        {{ d.contents|indent(8) }}
        {%- endif %}
        {%- if d.contents_local is defined %}
          {%- import d.contents_local as contents %}
    - contents: |
        {{ contents|string()|indent(8) }}
        {%- endif %}
{{ target_changed(dp) }}
      {% endfor %}
    {%- endif %}
  {% endfor %}
{%- endif %}
